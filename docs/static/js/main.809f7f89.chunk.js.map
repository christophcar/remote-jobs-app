{"version":3,"sources":["Input.js","Todo.js","App.js","serviceWorker.js","index.js"],"names":["Input","handleKeyUp","event","input","target","key","_this","props","onEnter","value","focus","react_default","a","createElement","onKeyUp","this","placeholder","Component","Todo","_this$props","text","onToggle","onDelete","done","className","onClick","App","state","todos","load","addTodo","setState","concat","Object","toConsumableArray","toggleTodo","index","todo","slice","objectSpread","deleteTodo","_this2","map","Todo_Todo","save","Input_Input","renderTodos","localStorage","setItem","JSON","stringify","parse","getItem","err","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","render","src_App_0","document","getElementById","URL","process","href","origin","addEventListener","fetch","response","contentType","headers","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.809f7f89.chunk.js","sourcesContent":["import React, { Component } from 'react'\n\nexport default class Input extends Component {\n  handleKeyUp = event => {\n    const input = event.target\n    if (event.key === 'Enter') {\n      this.props.onEnter(input.value)\n      input.value = ''\n      input.focus()\n    }\n  }\n\n  render() {\n    return <input onKeyUp={this.handleKeyUp} placeholder=\"Add to-do\" />\n  }\n}\n","import React, { Component } from 'react'\nimport './Todo.css'\n\nexport default class Todo extends Component {\n  render() {\n    const { text, onToggle, onDelete, done } = this.props\n\n    return (\n      <div className=\"Todo\">\n        <span className={done ? 'done' : ''} onClick={onToggle}>\n          {text}\n        </span>{' '}\n        <span onClick={onDelete}>&times;</span>\n      </div>\n    )\n  }\n}\n","import React, { Component } from 'react'\nimport './App.css'\n\nimport Input from './Input'\nimport Todo from './Todo'\n\nclass App extends Component {\n  state = {\n    todos: this.load(),\n  }\n\n  addTodo = text => {\n    this.setState({\n      todos: [{ text, done: false }, ...this.state.todos],\n    })\n  }\n\n  toggleTodo = index => {\n    const { todos } = this.state\n    const todo = todos[index]\n\n    this.setState({\n      todos: [\n        ...todos.slice(0, index),\n        { ...todo, done: !todo.done },\n        ...todos.slice(index + 1),\n      ],\n    })\n  }\n\n  deleteTodo = index => {\n    const { todos } = this.state\n\n    this.setState({\n      todos: [...todos.slice(0, index), ...todos.slice(index + 1)],\n    })\n  }\n\n  renderTodos() {\n    return this.state.todos.map((todo, index) => {\n      return (\n        <Todo\n          key={index}\n          text={todo.text}\n          done={todo.done}\n          onToggle={() => this.toggleTodo(index)}\n          onDelete={() => this.deleteTodo(index)}\n        />\n      )\n    })\n  }\n\n  render() {\n    this.save()\n    return (\n      <div className=\"App\">\n        <Input onEnter={this.addTodo} />\n        {this.renderTodos()}\n      </div>\n    )\n  }\n\n  save() {\n    localStorage.setItem('todo-app--todos', JSON.stringify(this.state.todos))\n  }\n\n  load() {\n    try {\n      return JSON.parse(localStorage.getItem('todo-app--todos')) || []\n    } catch (err) {\n      return []\n    }\n  }\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App'\nimport * as serviceWorker from './serviceWorker'\n\nReactDOM.render(<App />, document.getElementById('root'))\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.register()\n"],"sourceRoot":""}